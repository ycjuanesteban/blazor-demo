@page  "/vuelos"

@using Demo.Data.Vuelos;
@using System.Collections.Generic;

@inject IVuelosService VuelosService
@inject IJSRuntime JS

@if (vuelos == null)
{
    <h1>Cargando</h1>
}
else
{
    <a class="btn btn-primary" href="/crear-vuelo" role="button">Nuevo Vuelo</a>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Origen</th>
                <th scope="col">Destino</th>
                <th scope="col">Hora de salida</th>
                <th scope="col">Hora de llegada</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vuelo in vuelos)
            {
                <tr>
                    <td>@vuelo.Id</td>
                    <td>@vuelo.Origen</td>
                    <td>@vuelo.Destino</td>
                    <td>@vuelo.HoraLlegada</td>
                    <td>@vuelo.HoraSalida</td>
                    <td>
                        <a type="button" class="btn btn-primary" href="/editar-vuelo/@vuelo.Id">Editar</a>
                        <button type="button" class="btn btn-danger" @onclick="(() => EliminarVuelo(vuelo.Id))">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    List<Vuelo> vuelos;
    Vuelo Vuelo { get; set; } = new Vuelo();
    bool IsOpen { get; set; }
    string HeaderText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        vuelos = await VuelosService.ObtenerVuelos();
    }

    private async void EliminarVuelo(int idVuelo)
    {
        string mensaje = "Deseas eliminar el vuelo?";
        if (await JS.InvokeAsync<bool>("confirm", mensaje))
        {
            await VuelosService.EliminarVuelo(idVuelo);
            vuelos = await VuelosService.ObtenerVuelos();
            this.StateHasChanged();
        }
    }
}
